from setuptools import setup, Extension

from pathlib import Path

llvm_objs = [str(x) for x in Path(".").glob("libLLVM*.a")]

IR2Vec_core = Extension(
    "IR2Vec_pkg.core",
    sources=["IR2Vec_pkg/core.cpp"],
    include_dirs=[
        "./IR2Vec_pkg",
        "./IR2Vec_pkg/IR2Vec_include",
        "../../build/clang+llvm-12.0.0-x86_64-linux-gnu-ubuntu-20.04/include"
    ],
    library_dirs = [
        "../../build/clang+llvm-12.0.0-x86_64-linux-gnu-ubuntu-20.04/lib",
        "../../build/lib"
    ],
      # list of directories to search for C/C++ header files (in Unix form for portability)
    libraries=[
        'LLVMWindowsManifest',
        'LLVMXRay',
        'LLVMLibDriver',
        'LLVMDlltoolDriver',
        'LLVMCoverage',
        'LLVMLineEditor',
        'LLVMXCoreDisassembler',
        'LLVMXCoreCodeGen',
        'LLVMXCoreDesc',
        'LLVMXCoreInfo',
        'LLVMX86Disassembler',
        'LLVMX86AsmParser',
        'LLVMX86CodeGen',
        'LLVMX86Desc',
        'LLVMX86Info',
        'LLVMWebAssemblyDisassembler',
        'LLVMWebAssemblyAsmParser',
        'LLVMWebAssemblyCodeGen',
        'LLVMWebAssemblyDesc',
        'LLVMWebAssemblyInfo',
        'LLVMSystemZDisassembler',
        'LLVMSystemZAsmParser',
        'LLVMSystemZCodeGen',
        'LLVMSystemZDesc',
        'LLVMSystemZInfo',
        'LLVMSparcDisassembler',
        'LLVMSparcAsmParser',
        'LLVMSparcCodeGen',
        'LLVMSparcDesc',
        'LLVMSparcInfo',
        'LLVMRISCVDisassembler',
        'LLVMRISCVAsmParser',
        'LLVMRISCVCodeGen',
        'LLVMRISCVDesc',
        'LLVMRISCVInfo',
        'LLVMPowerPCDisassembler',
        'LLVMPowerPCAsmParser',
        'LLVMPowerPCCodeGen',
        'LLVMPowerPCDesc',
        'LLVMPowerPCInfo',
        'LLVMNVPTXCodeGen',
        'LLVMNVPTXDesc',
        'LLVMNVPTXInfo',
        'LLVMMSP430Disassembler',
        'LLVMMSP430AsmParser',
        'LLVMMSP430CodeGen',
        'LLVMMSP430Desc',
        'LLVMMSP430Info',
        'LLVMMipsDisassembler',
        'LLVMMipsAsmParser',
        'LLVMMipsCodeGen',
        'LLVMMipsDesc',
        'LLVMMipsInfo',
        'LLVMLanaiDisassembler',
        'LLVMLanaiCodeGen',
        'LLVMLanaiAsmParser',
        'LLVMLanaiDesc',
        'LLVMLanaiInfo',
        'LLVMHexagonDisassembler',
        'LLVMHexagonCodeGen',
        'LLVMHexagonAsmParser',
        'LLVMHexagonDesc',
        'LLVMHexagonInfo',
        'LLVMBPFDisassembler',
        'LLVMBPFAsmParser',
        'LLVMBPFCodeGen',
        'LLVMBPFDesc',
        'LLVMBPFInfo',
        'LLVMAVRDisassembler',
        'LLVMAVRAsmParser',
        'LLVMAVRCodeGen',
        'LLVMAVRDesc',
        'LLVMAVRInfo',
        'LLVMARMDisassembler',
        'LLVMARMAsmParser',
        'LLVMARMCodeGen',
        'LLVMARMDesc',
        'LLVMARMUtils',
        'LLVMARMInfo',
        'LLVMAMDGPUDisassembler',
        'LLVMAMDGPUAsmParser',
        'LLVMAMDGPUCodeGen',
        'LLVMAMDGPUDesc',
        'LLVMAMDGPUUtils',
        'LLVMAMDGPUInfo',
        'LLVMAArch64Disassembler',
        'LLVMAArch64AsmParser',
        'LLVMAArch64CodeGen',
        'LLVMAArch64Desc',
        'LLVMAArch64Utils',
        'LLVMAArch64Info',
        'LLVMOrcJIT',
        'LLVMMCJIT',
        'LLVMJITLink',
        'LLVMOrcTargetProcess',
        'LLVMOrcShared',
        'LLVMInterpreter',
        'LLVMExecutionEngine',
        'LLVMRuntimeDyld',
        'LLVMSymbolize',
        'LLVMDebugInfoPDB',
        'LLVMDebugInfoGSYM',
        'LLVMOption',
        'LLVMObjectYAML',
        'LLVMMCA',
        'LLVMMCDisassembler',
        'LLVMLTO',
        'LLVMCFGuard',
        'LLVMFrontendOpenACC',
        'LLVMExtensions',
        'Polly',
        'PollyISL',
        'LLVMPasses',
        'LLVMObjCARCOpts',
        'LLVMHelloNew',
        'LLVMCoroutines',
        'LLVMipo',
        'LLVMInstrumentation',
        'LLVMVectorize',
        'LLVMLinker',
        'LLVMFrontendOpenMP',
        'LLVMDWARFLinker',
        'LLVMGlobalISel',
        'LLVMMIRParser',
        'LLVMAsmPrinter',
        'LLVMDebugInfoDWARF',
        'LLVMSelectionDAG',
        'LLVMCodeGen',
        'LLVMIRReader',
        'LLVMAsmParser',
        'LLVMInterfaceStub',
        'LLVMFileCheck',
        'LLVMFuzzMutate',
        'LLVMTarget',
        'LLVMScalarOpts',
        'LLVMInstCombine',
        'LLVMAggressiveInstCombine',
        'LLVMTransformUtils',
        'LLVMBitWriter',
        'LLVMAnalysis',
        'LLVMProfileData',
        'LLVMObject',
        'LLVMTextAPI',
        'LLVMMCParser',
        'LLVMMC',
        'LLVMDebugInfoCodeView',
        'LLVMDebugInfoMSF',
        'LLVMBitReader',
        'LLVMCore',
        'LLVMRemarks',
        'LLVMBitstreamReader',
        'LLVMBinaryFormat',
        'LLVMTableGen',
        'LLVMSupport',
        'LLVMDemangle',
        'IR2Vec'],
    extra_compile_args=["-v"],
)

setup(
    name="IR2Vec_pkg",
    author="Shikhar Jain",
    author_email="cs22mtech02002@iith.ac.in",
    version="1.0.0",
    description="given input .ll/.bc generates corresponding IR2Vec embeddings in a file or on stdout",
    ext_modules=[IR2Vec_core],  # A list of Python extensions to be built
    packages=["IR2Vec_pkg"],  # A list of Python packages that distutils will manipulate
    # package_data={'':['*.so*','./IR2Vec_include/*','./llvm/*','./llvm-c/*','seedEmbeddingVocab-300-llvm12.txt']},
    package_data={
        "": [
            "./IR2Vec_include/*",
            "seedEmbeddingVocab-300-llvm12.txt",
        ]
    },
    include_package_data=True,
)
